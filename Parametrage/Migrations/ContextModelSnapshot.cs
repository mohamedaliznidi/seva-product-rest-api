// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Parametrage.Infrastructure;

#nullable disable

namespace Parametrage.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GarantieRisque", b =>
                {
                    b.Property<int>("GarantiesId")
                        .HasColumnType("int");

                    b.Property<int>("RisquesId")
                        .HasColumnType("int");

                    b.HasKey("GarantiesId", "RisquesId");

                    b.HasIndex("RisquesId");

                    b.ToTable("GarantieRisque");
                });

            modelBuilder.Entity("GarantieZone", b =>
                {
                    b.Property<int>("GarantiesId")
                        .HasColumnType("int");

                    b.Property<int>("ZonesId")
                        .HasColumnType("int");

                    b.HasKey("GarantiesId", "ZonesId");

                    b.HasIndex("ZonesId");

                    b.ToTable("GarantieZone");
                });

            modelBuilder.Entity("Parametrage.Entities.Acte", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ActeFamilleId")
                        .HasColumnType("int");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActeFamilleId");

                    b.ToTable("Actes");
                });

            modelBuilder.Entity("Parametrage.Entities.ActeFamille", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ActeFamilleId")
                        .HasColumnType("int");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActeFamilleId");

                    b.ToTable("ActeFamilles");
                });

            modelBuilder.Entity("Parametrage.Entities.College", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeCollegeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeCollegeId");

                    b.ToTable("Colleges");
                });

            modelBuilder.Entity("Parametrage.Entities.Commissionnement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Commissionnements");
                });

            modelBuilder.Entity("Parametrage.Entities.Devise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("IdPays")
                        .HasColumnType("int");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdPays")
                        .IsUnique();

                    b.ToTable("Devise");
                });

            modelBuilder.Entity("Parametrage.Entities.Garantie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateEffet")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Enseigne")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("GestionCotisation")
                        .HasColumnType("bit");

                    b.Property<bool>("GestionPrestation")
                        .HasColumnType("bit");

                    b.Property<int>("IdDevise")
                        .HasColumnType("int");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LibelleCommercial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SousProduitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdDevise");

                    b.HasIndex("SousProduitId");

                    b.ToTable("Garanties");
                });

            modelBuilder.Entity("Parametrage.Entities.InfoComp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("InfoComp");
                });

            modelBuilder.Entity("Parametrage.Entities.Intervenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Intervenants");
                });

            modelBuilder.Entity("Parametrage.Entities.Pays", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Pays");
                });

            modelBuilder.Entity("Parametrage.Entities.Produit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateEffet")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Enseigne")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("GestionCotisation")
                        .HasColumnType("bit");

                    b.Property<bool>("GestionPrestation")
                        .HasColumnType("bit");

                    b.Property<int>("IdDevise")
                        .HasColumnType("int");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LibelleCommercial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdDevise");

                    b.ToTable("Produits");
                });

            modelBuilder.Entity("Parametrage.Entities.RegleCalcul", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("GarantieId")
                        .HasColumnType("int");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeCotisant")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GarantieId");

                    b.HasIndex("ZoneId");

                    b.ToTable("RegleCalculs");
                });

            modelBuilder.Entity("Parametrage.Entities.RegleInfoComp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("InfoCompId")
                        .HasColumnType("int");

                    b.Property<int?>("RegleCalculId")
                        .HasColumnType("int");

                    b.Property<string>("Valeur")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InfoCompId");

                    b.HasIndex("RegleCalculId");

                    b.ToTable("RegleInfoComp");
                });

            modelBuilder.Entity("Parametrage.Entities.Risque", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Risques");
                });

            modelBuilder.Entity("Parametrage.Entities.SousProduit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateEffet")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Enseigne")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("GestionCotisation")
                        .HasColumnType("bit");

                    b.Property<bool>("GestionPrestation")
                        .HasColumnType("bit");

                    b.Property<int>("IdDevise")
                        .HasColumnType("int");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LibelleCommercial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProduitId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdDevise");

                    b.HasIndex("ProduitId");

                    b.ToTable("SousProduits");
                });

            modelBuilder.Entity("Parametrage.Entities.TypeCollege", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeColleges");
                });

            modelBuilder.Entity("Parametrage.Entities.ValeurInfoComp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("InfoCompId")
                        .HasColumnType("int");

                    b.Property<string>("Valeur")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InfoCompId");

                    b.ToTable("ValeurInfoComp");
                });

            modelBuilder.Entity("Parametrage.Entities.Zone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("PaysZone", b =>
                {
                    b.Property<int>("PaysId")
                        .HasColumnType("int");

                    b.Property<int>("ZonesId")
                        .HasColumnType("int");

                    b.HasKey("PaysId", "ZonesId");

                    b.HasIndex("ZonesId");

                    b.ToTable("PaysZone");
                });

            modelBuilder.Entity("ProduitRisque", b =>
                {
                    b.Property<int>("ProduitsId")
                        .HasColumnType("int");

                    b.Property<int>("RisquesId")
                        .HasColumnType("int");

                    b.HasKey("ProduitsId", "RisquesId");

                    b.HasIndex("RisquesId");

                    b.ToTable("ProduitRisque");
                });

            modelBuilder.Entity("ProduitZone", b =>
                {
                    b.Property<int>("ProduitsId")
                        .HasColumnType("int");

                    b.Property<int>("ZonesId")
                        .HasColumnType("int");

                    b.HasKey("ProduitsId", "ZonesId");

                    b.HasIndex("ZonesId");

                    b.ToTable("ProduitZone");
                });

            modelBuilder.Entity("RisqueSousProduit", b =>
                {
                    b.Property<int>("RisquesId")
                        .HasColumnType("int");

                    b.Property<int>("SousProduitsId")
                        .HasColumnType("int");

                    b.HasKey("RisquesId", "SousProduitsId");

                    b.HasIndex("SousProduitsId");

                    b.ToTable("RisqueSousProduit");
                });

            modelBuilder.Entity("SousProduitZone", b =>
                {
                    b.Property<int>("SousProduitsId")
                        .HasColumnType("int");

                    b.Property<int>("ZonesId")
                        .HasColumnType("int");

                    b.HasKey("SousProduitsId", "ZonesId");

                    b.HasIndex("ZonesId");

                    b.ToTable("SousProduitZone");
                });

            modelBuilder.Entity("GarantieRisque", b =>
                {
                    b.HasOne("Parametrage.Entities.Garantie", null)
                        .WithMany()
                        .HasForeignKey("GarantiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Parametrage.Entities.Risque", null)
                        .WithMany()
                        .HasForeignKey("RisquesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GarantieZone", b =>
                {
                    b.HasOne("Parametrage.Entities.Garantie", null)
                        .WithMany()
                        .HasForeignKey("GarantiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Parametrage.Entities.Zone", null)
                        .WithMany()
                        .HasForeignKey("ZonesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Parametrage.Entities.Acte", b =>
                {
                    b.HasOne("Parametrage.Entities.ActeFamille", "ActeFamille")
                        .WithMany("Actes")
                        .HasForeignKey("ActeFamilleId");

                    b.Navigation("ActeFamille");
                });

            modelBuilder.Entity("Parametrage.Entities.ActeFamille", b =>
                {
                    b.HasOne("Parametrage.Entities.ActeFamille", "acteFamille")
                        .WithMany("acteFamilles")
                        .HasForeignKey("ActeFamilleId");

                    b.Navigation("acteFamille");
                });

            modelBuilder.Entity("Parametrage.Entities.College", b =>
                {
                    b.HasOne("Parametrage.Entities.TypeCollege", "TypeCollege")
                        .WithMany()
                        .HasForeignKey("TypeCollegeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeCollege");
                });

            modelBuilder.Entity("Parametrage.Entities.Devise", b =>
                {
                    b.HasOne("Parametrage.Entities.Pays", "Pays")
                        .WithOne("Devise")
                        .HasForeignKey("Parametrage.Entities.Devise", "IdPays")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pays");
                });

            modelBuilder.Entity("Parametrage.Entities.Garantie", b =>
                {
                    b.HasOne("Parametrage.Entities.Devise", "Devise")
                        .WithMany()
                        .HasForeignKey("IdDevise")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Parametrage.Entities.SousProduit", "SousProduit")
                        .WithMany("Garanties")
                        .HasForeignKey("SousProduitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Devise");

                    b.Navigation("SousProduit");
                });

            modelBuilder.Entity("Parametrage.Entities.Produit", b =>
                {
                    b.HasOne("Parametrage.Entities.Devise", "Devise")
                        .WithMany()
                        .HasForeignKey("IdDevise")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Devise");
                });

            modelBuilder.Entity("Parametrage.Entities.RegleCalcul", b =>
                {
                    b.HasOne("Parametrage.Entities.Garantie", "Garantie")
                        .WithMany()
                        .HasForeignKey("GarantieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Parametrage.Entities.Zone", "Zone")
                        .WithMany()
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Garantie");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("Parametrage.Entities.RegleInfoComp", b =>
                {
                    b.HasOne("Parametrage.Entities.InfoComp", "InfoComp")
                        .WithMany()
                        .HasForeignKey("InfoCompId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Parametrage.Entities.RegleCalcul", null)
                        .WithMany("RegleInfoComps")
                        .HasForeignKey("RegleCalculId");

                    b.Navigation("InfoComp");
                });

            modelBuilder.Entity("Parametrage.Entities.SousProduit", b =>
                {
                    b.HasOne("Parametrage.Entities.Devise", "Devise")
                        .WithMany()
                        .HasForeignKey("IdDevise")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Parametrage.Entities.Produit", "Produit")
                        .WithMany("SousProduits")
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Devise");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("Parametrage.Entities.ValeurInfoComp", b =>
                {
                    b.HasOne("Parametrage.Entities.InfoComp", null)
                        .WithMany("ValeurInfoComps")
                        .HasForeignKey("InfoCompId");
                });

            modelBuilder.Entity("PaysZone", b =>
                {
                    b.HasOne("Parametrage.Entities.Pays", null)
                        .WithMany()
                        .HasForeignKey("PaysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Parametrage.Entities.Zone", null)
                        .WithMany()
                        .HasForeignKey("ZonesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProduitRisque", b =>
                {
                    b.HasOne("Parametrage.Entities.Produit", null)
                        .WithMany()
                        .HasForeignKey("ProduitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Parametrage.Entities.Risque", null)
                        .WithMany()
                        .HasForeignKey("RisquesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProduitZone", b =>
                {
                    b.HasOne("Parametrage.Entities.Produit", null)
                        .WithMany()
                        .HasForeignKey("ProduitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Parametrage.Entities.Zone", null)
                        .WithMany()
                        .HasForeignKey("ZonesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RisqueSousProduit", b =>
                {
                    b.HasOne("Parametrage.Entities.Risque", null)
                        .WithMany()
                        .HasForeignKey("RisquesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Parametrage.Entities.SousProduit", null)
                        .WithMany()
                        .HasForeignKey("SousProduitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SousProduitZone", b =>
                {
                    b.HasOne("Parametrage.Entities.SousProduit", null)
                        .WithMany()
                        .HasForeignKey("SousProduitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Parametrage.Entities.Zone", null)
                        .WithMany()
                        .HasForeignKey("ZonesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Parametrage.Entities.ActeFamille", b =>
                {
                    b.Navigation("Actes");

                    b.Navigation("acteFamilles");
                });

            modelBuilder.Entity("Parametrage.Entities.InfoComp", b =>
                {
                    b.Navigation("ValeurInfoComps");
                });

            modelBuilder.Entity("Parametrage.Entities.Pays", b =>
                {
                    b.Navigation("Devise")
                        .IsRequired();
                });

            modelBuilder.Entity("Parametrage.Entities.Produit", b =>
                {
                    b.Navigation("SousProduits");
                });

            modelBuilder.Entity("Parametrage.Entities.RegleCalcul", b =>
                {
                    b.Navigation("RegleInfoComps");
                });

            modelBuilder.Entity("Parametrage.Entities.SousProduit", b =>
                {
                    b.Navigation("Garanties");
                });
#pragma warning restore 612, 618
        }
    }
}
